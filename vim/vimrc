"permet de ne pas encombrer le dossier maison
set undodir=$XDG_DATA_HOME/vim/undo
set directory=$XDG_DATA_HOME/vim/swap
set backupdir=$XDG_DATA_HOME/vim/backup
set viminfo+='1000,n$XDG_DATA_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after

"Active les plugins
execute pathogen#infect()

"permet de connaitre sa position
set ruler

"permet d'activer la coloration syntaxique
syntax enable

"Configure la liste des thèmes
function ThemeList(themeNumber)
	if a:themeNumber == 0
		"dark (default)
		set background=dark
		colorscheme dark-meadow 
	elseif a:themeNumber == 1
		"light
		set background=light
		colorscheme Base2Tone_MorningLight
	elseif a:themeNumber == 2
		set background=light
		colorscheme pencil
	elseif a:themeNumber == 3
		set background=dark
		colorscheme hashpunk
	elseif a:themeNumber == 4
		set background=dark
		colorscheme oldbook8
	elseif a:themeNumber == 5
		set background=dark
		colorscheme hashpunk-lapis
	elseif a:themeNumber == 6
		set background=dark
		colorscheme duotone-darkearth
	elseif a:themeNumber == 7
		set background=dark
		colorscheme photon
	else
		call ThemeList(0)
	endif
endfunction
call ThemeList(1111) "Goes to default

"Change theme on the fly
let g:MyThemeCount=0
function CycleTheme()
	let g:MyThemeCount = (g:MyThemeCount + 1) % 8
	call ThemeList(g:MyThemeCount)
endfunction
nnoremap <F3> :call CycleTheme()<Enter>:echom g:colors_name<Enter>

"Change spell checking on the fly
let g:spellCount = 0
function ToogleSpell()
	let g:spellCount = g:spellCount + 1
	let l:trueNumber = g:spellCount % 3
	if l:trueNumber == 0
		set nospell
		echom "No spell checking"
	elseif l:trueNumber == 1
		set spell spelllang=en_us
		echom "English spell checking"
	else
		set spell spelllang=fr
		echom "French spell checking"
	endif
endfunction
nnoremap <F4> :call ToogleSpell()<Enter>


"controle le nombre de charactère que font les TAB
set tabstop=4

"permet d'être plus sur d l'utilisation continue des espaces
"set softtabstop=4

"écrit des espaces quand on fait tab
"set expandtab  

"permet une inentation intéligente
set shiftwidth=4

"indique le numéro de la ligne
set number
set norelativenumber "Par default, force le mode non relatif
nnoremap <C-n> :set relativenumber!<Cr>

"surligne les recherches
set hlsearch

"assure que le backspace marche
set backspace=indent,eol,start

"affiche les longue lignes sur plusieur lignes
set wrap

" use 256 colors in terminal
if !has("gui_running")
    set t_Co=256
    set term=screen-256color
endif

"permet d'utiliser des  .vimrc locaux à un dossier tout en empéchant vim de faire des trucs louches avec des comandes
set exrc
set secure

"permet d'utiliser des plugins specifiques à certain types de fichier
filetype plugin on

"considère les .h comme du c et pas du c++
augroup project
    autocmd!
    autocmd BufRead,BufNewFile *.h,*.c set filetype=c
augroup END

"permet d'utiliser le clipboard général
vnoremap <C-c> "+y
inoremap <C-v> <Esc>"+P

"permet d'avoir des racourssis clavier normaux
noremap <C-s> <Esc>:w<Cr>
inoremap <C-s> <Esc>:w<Cr>a
noremap <C-q> <Esc>:q<Cr>
inoremap <C-q> <Esc>:q<Cr>
"Je n'autorise pas les do et undo en inserion car je ne peut pas limiter ces
"actions à un seul mot
"inoremap <C-z> <Esc>ua
"inoremap <C-y> <Esc><C-r>a
nnoremap <C-z> <Esc>u
nnoremap <C-y> <C-r>
inoremap <C-a> <Esc>gg0vG$
"récupère les fonctions du Ctrl-R avec ctrl-i
inoremap <C-i> <C-v>
"case insensitive search
nnoremap <C-f> /\c
inoremap <Esc><C-f> /\c
inoremap <C-g> <Esc>/1233#{<Cr>i 

"empèche les bips en tty
set visualbell

"utilise l'espace en tant que leader
let mapleader = " "

"s'assure que les ftplugin marchent
filetype plugin indent on 

"contrôle de la souris
set mouse=a

"Arrete d'utiliser Esc pour quiter le mode insertion
inoremap jk <esc>

"Status line
set laststatus=2               "Always visible
set statusline=%f\ -\ %Y\ %r\  "Left side (name and type)
set statusline+=%=             " Switch to the right side
set statusline+=%l\ %c%V\ %P   "Right side (Position)

